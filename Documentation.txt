Roteiro desse documento

#Criando o arquivo package.json
yarn init -y

#Adicionando bilbioteca 'Babel' como desenvolvedor - converte o código no formato que o browser entende
yarn add @babel/core @babel/preset-env @babel/preset-react webpack webpack-cli -D
Ou altera 'dependencies' para 'devDependencies'
@babel/preset-env: alterar as funcionalidades do javascript que o navegador ainda não entende - import/export - as partes de arrow functions de classes (const soma = (a,b)=> a+b;)
@babel/preset-react: ele vai transformar as coisas que o navegador não entende do React, como: jsx as funcionalidades exclusivas do react

#Adicionando biblioteca 'React' e 'React-Dom'
yarn add react react-dom

#Adicionando bilbioteca 'babel-loader' como Desenvolvedor 'D'
yarn add babel-loader -D

#Buildando a aplicação - usa o webpack - gera na pasta 'public' um arquivo chamado 'bundle.js' com o código que o navegador entende
yarn build

#Atualizando a aplicação após alterações no fonte
yarn add webpack-dev-server -D
Após no package.json adicionar '"build": "webpack-dev-server --mode development"'

#Buildando em DEV
Ao rodar o comando 'yarn dev' no terminal, exibirá o endereço da aplicação rodando em desenvolvimento
Project is running at http://localhost:8080/, aí basta acessar esse endereço e qualquer alteração a aplicação será atualizada automaticamente
Builda - gera o bundle novamente - apresenta a página local alterada

#Tipos de build - package.json
"webpack-dev-server --mode development"' --> permitem conhecer o conteúdo
"webpack-dev-server --mode production"' --> minifica o código gerado